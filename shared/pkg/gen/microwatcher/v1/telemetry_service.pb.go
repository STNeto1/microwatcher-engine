// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: microwatcher/v1/telemetry_service.proto

package microwatcherv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// === GENERIC ===
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{0}
}

// === TELEMETRY ===
type TelemetryNetwork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BytesSent     uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesRecv     uint64                 `protobuf:"varint,3,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryNetwork) Reset() {
	*x = TelemetryNetwork{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryNetwork) ProtoMessage() {}

func (x *TelemetryNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryNetwork.ProtoReflect.Descriptor instead.
func (*TelemetryNetwork) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryNetwork) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *TelemetryNetwork) GetBytesRecv() uint64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

type TelemetryDisk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Mountpoint    string                 `protobuf:"bytes,2,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Free          uint64                 `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	Used          uint64                 `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryDisk) Reset() {
	*x = TelemetryDisk{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryDisk) ProtoMessage() {}

func (x *TelemetryDisk) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryDisk.ProtoReflect.Descriptor instead.
func (*TelemetryDisk) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{2}
}

func (x *TelemetryDisk) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TelemetryDisk) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *TelemetryDisk) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TelemetryDisk) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *TelemetryDisk) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type Telemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	TotalMemory   uint64                 `protobuf:"varint,3,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	FreeMemory    uint64                 `protobuf:"varint,4,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
	UsedMemory    uint64                 `protobuf:"varint,5,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	TotalCpu      float32                `protobuf:"fixed32,6,opt,name=total_cpu,json=totalCpu,proto3" json:"total_cpu,omitempty"`
	FreeCpu       float32                `protobuf:"fixed32,7,opt,name=free_cpu,json=freeCpu,proto3" json:"free_cpu,omitempty"`
	UsedCpu       float32                `protobuf:"fixed32,8,opt,name=used_cpu,json=usedCpu,proto3" json:"used_cpu,omitempty"`
	Disks         []*TelemetryDisk       `protobuf:"bytes,9,rep,name=disks,proto3" json:"disks,omitempty"`
	Networks      []*TelemetryNetwork    `protobuf:"bytes,10,rep,name=networks,proto3" json:"networks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{3}
}

func (x *Telemetry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Telemetry) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Telemetry) GetTotalMemory() uint64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *Telemetry) GetFreeMemory() uint64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

func (x *Telemetry) GetUsedMemory() uint64 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *Telemetry) GetTotalCpu() float32 {
	if x != nil {
		return x.TotalCpu
	}
	return 0
}

func (x *Telemetry) GetFreeCpu() float32 {
	if x != nil {
		return x.FreeCpu
	}
	return 0
}

func (x *Telemetry) GetUsedCpu() float32 {
	if x != nil {
		return x.UsedCpu
	}
	return 0
}

func (x *Telemetry) GetDisks() []*TelemetryDisk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Telemetry) GetNetworks() []*TelemetryNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

type SendTelemetryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Telemetries   []*Telemetry           `protobuf:"bytes,1,rep,name=telemetries,proto3" json:"telemetries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTelemetryRequest) Reset() {
	*x = SendTelemetryRequest{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTelemetryRequest) ProtoMessage() {}

func (x *SendTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTelemetryRequest.ProtoReflect.Descriptor instead.
func (*SendTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{4}
}

func (x *SendTelemetryRequest) GetTelemetries() []*Telemetry {
	if x != nil {
		return x.Telemetries
	}
	return nil
}

type SendTelemetryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTelemetryResponse) Reset() {
	*x = SendTelemetryResponse{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTelemetryResponse) ProtoMessage() {}

func (x *SendTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTelemetryResponse.ProtoReflect.Descriptor instead.
func (*SendTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{5}
}

func (x *SendTelemetryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// === HEALTH CHECK ===
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{6}
}

func (x *HealthCheckRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HealthCheckRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

var File_microwatcher_v1_telemetry_service_proto protoreflect.FileDescriptor

const file_microwatcher_v1_telemetry_service_proto_rawDesc = "" +
	"\n" +
	"'microwatcher/v1/telemetry_service.proto\x12\x0fmicrowatcher.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\a\n" +
	"\x05Empty\"d\n" +
	"\x10TelemetryNetwork\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x02 \x01(\x04R\tbytesSent\x12\x1d\n" +
	"\n" +
	"bytes_recv\x18\x03 \x01(\x04R\tbytesRecv\"\x83\x01\n" +
	"\rTelemetryDisk\x12\x14\n" +
	"\x05label\x18\x01 \x01(\tR\x05label\x12\x1e\n" +
	"\n" +
	"mountpoint\x18\x02 \x01(\tR\n" +
	"mountpoint\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x04R\x05total\x12\x12\n" +
	"\x04free\x18\x04 \x01(\x04R\x04free\x12\x12\n" +
	"\x04used\x18\x05 \x01(\x04R\x04used\"\x92\x03\n" +
	"\tTelemetry\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1e\n" +
	"\n" +
	"identifier\x18\x02 \x01(\tR\n" +
	"identifier\x12!\n" +
	"\ftotal_memory\x18\x03 \x01(\x04R\vtotalMemory\x12\x1f\n" +
	"\vfree_memory\x18\x04 \x01(\x04R\n" +
	"freeMemory\x12\x1f\n" +
	"\vused_memory\x18\x05 \x01(\x04R\n" +
	"usedMemory\x12\x1b\n" +
	"\ttotal_cpu\x18\x06 \x01(\x02R\btotalCpu\x12\x19\n" +
	"\bfree_cpu\x18\a \x01(\x02R\afreeCpu\x12\x19\n" +
	"\bused_cpu\x18\b \x01(\x02R\ausedCpu\x124\n" +
	"\x05disks\x18\t \x03(\v2\x1e.microwatcher.v1.TelemetryDiskR\x05disks\x12=\n" +
	"\bnetworks\x18\n" +
	" \x03(\v2!.microwatcher.v1.TelemetryNetworkR\bnetworks\"T\n" +
	"\x14SendTelemetryRequest\x12<\n" +
	"\vtelemetries\x18\x01 \x03(\v2\x1a.microwatcher.v1.TelemetryR\vtelemetries\"1\n" +
	"\x15SendTelemetryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"n\n" +
	"\x12HealthCheckRequest\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1e\n" +
	"\n" +
	"identifier\x18\x02 \x01(\tR\n" +
	"identifier2\xc2\x01\n" +
	"\x10TelemetryService\x12`\n" +
	"\rSendTelemetry\x12%.microwatcher.v1.SendTelemetryRequest\x1a&.microwatcher.v1.SendTelemetryResponse\"\x00\x12L\n" +
	"\vHealthCheck\x12#.microwatcher.v1.HealthCheckRequest\x1a\x16.microwatcher.v1.Empty\"\x00BCZAgithub.com/microwatcher/shared/gen/microwatcher/v1;microwatcherv1b\x06proto3"

var (
	file_microwatcher_v1_telemetry_service_proto_rawDescOnce sync.Once
	file_microwatcher_v1_telemetry_service_proto_rawDescData []byte
)

func file_microwatcher_v1_telemetry_service_proto_rawDescGZIP() []byte {
	file_microwatcher_v1_telemetry_service_proto_rawDescOnce.Do(func() {
		file_microwatcher_v1_telemetry_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_microwatcher_v1_telemetry_service_proto_rawDesc), len(file_microwatcher_v1_telemetry_service_proto_rawDesc)))
	})
	return file_microwatcher_v1_telemetry_service_proto_rawDescData
}

var file_microwatcher_v1_telemetry_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_microwatcher_v1_telemetry_service_proto_goTypes = []any{
	(*Empty)(nil),                 // 0: microwatcher.v1.Empty
	(*TelemetryNetwork)(nil),      // 1: microwatcher.v1.TelemetryNetwork
	(*TelemetryDisk)(nil),         // 2: microwatcher.v1.TelemetryDisk
	(*Telemetry)(nil),             // 3: microwatcher.v1.Telemetry
	(*SendTelemetryRequest)(nil),  // 4: microwatcher.v1.SendTelemetryRequest
	(*SendTelemetryResponse)(nil), // 5: microwatcher.v1.SendTelemetryResponse
	(*HealthCheckRequest)(nil),    // 6: microwatcher.v1.HealthCheckRequest
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_microwatcher_v1_telemetry_service_proto_depIdxs = []int32{
	7, // 0: microwatcher.v1.Telemetry.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: microwatcher.v1.Telemetry.disks:type_name -> microwatcher.v1.TelemetryDisk
	1, // 2: microwatcher.v1.Telemetry.networks:type_name -> microwatcher.v1.TelemetryNetwork
	3, // 3: microwatcher.v1.SendTelemetryRequest.telemetries:type_name -> microwatcher.v1.Telemetry
	7, // 4: microwatcher.v1.HealthCheckRequest.timestamp:type_name -> google.protobuf.Timestamp
	4, // 5: microwatcher.v1.TelemetryService.SendTelemetry:input_type -> microwatcher.v1.SendTelemetryRequest
	6, // 6: microwatcher.v1.TelemetryService.HealthCheck:input_type -> microwatcher.v1.HealthCheckRequest
	5, // 7: microwatcher.v1.TelemetryService.SendTelemetry:output_type -> microwatcher.v1.SendTelemetryResponse
	0, // 8: microwatcher.v1.TelemetryService.HealthCheck:output_type -> microwatcher.v1.Empty
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_microwatcher_v1_telemetry_service_proto_init() }
func file_microwatcher_v1_telemetry_service_proto_init() {
	if File_microwatcher_v1_telemetry_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_microwatcher_v1_telemetry_service_proto_rawDesc), len(file_microwatcher_v1_telemetry_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_microwatcher_v1_telemetry_service_proto_goTypes,
		DependencyIndexes: file_microwatcher_v1_telemetry_service_proto_depIdxs,
		MessageInfos:      file_microwatcher_v1_telemetry_service_proto_msgTypes,
	}.Build()
	File_microwatcher_v1_telemetry_service_proto = out.File
	file_microwatcher_v1_telemetry_service_proto_goTypes = nil
	file_microwatcher_v1_telemetry_service_proto_depIdxs = nil
}
