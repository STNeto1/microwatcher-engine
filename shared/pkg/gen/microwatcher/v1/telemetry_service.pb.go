// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: microwatcher/v1/telemetry_service.proto

package microwatcherv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Telemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Identifier    string                 `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	TotalMemory   uint64                 `protobuf:"varint,3,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	FreeMemory    uint64                 `protobuf:"varint,4,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
	UsedMemory    uint64                 `protobuf:"varint,5,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	TotalCpu      float32                `protobuf:"fixed32,6,opt,name=total_cpu,json=totalCpu,proto3" json:"total_cpu,omitempty"`
	FreeCpu       float32                `protobuf:"fixed32,7,opt,name=free_cpu,json=freeCpu,proto3" json:"free_cpu,omitempty"`
	UsedCpu       float32                `protobuf:"fixed32,8,opt,name=used_cpu,json=usedCpu,proto3" json:"used_cpu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{0}
}

func (x *Telemetry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Telemetry) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Telemetry) GetTotalMemory() uint64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *Telemetry) GetFreeMemory() uint64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

func (x *Telemetry) GetUsedMemory() uint64 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *Telemetry) GetTotalCpu() float32 {
	if x != nil {
		return x.TotalCpu
	}
	return 0
}

func (x *Telemetry) GetFreeCpu() float32 {
	if x != nil {
		return x.FreeCpu
	}
	return 0
}

func (x *Telemetry) GetUsedCpu() float32 {
	if x != nil {
		return x.UsedCpu
	}
	return 0
}

type SendTelemetryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Telemetries   []*Telemetry           `protobuf:"bytes,1,rep,name=telemetries,proto3" json:"telemetries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTelemetryRequest) Reset() {
	*x = SendTelemetryRequest{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTelemetryRequest) ProtoMessage() {}

func (x *SendTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTelemetryRequest.ProtoReflect.Descriptor instead.
func (*SendTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{1}
}

func (x *SendTelemetryRequest) GetTelemetries() []*Telemetry {
	if x != nil {
		return x.Telemetries
	}
	return nil
}

type SendTelemetryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTelemetryResponse) Reset() {
	*x = SendTelemetryResponse{}
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTelemetryResponse) ProtoMessage() {}

func (x *SendTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_microwatcher_v1_telemetry_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTelemetryResponse.ProtoReflect.Descriptor instead.
func (*SendTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_microwatcher_v1_telemetry_service_proto_rawDescGZIP(), []int{2}
}

func (x *SendTelemetryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_microwatcher_v1_telemetry_service_proto protoreflect.FileDescriptor

const file_microwatcher_v1_telemetry_service_proto_rawDesc = "" +
	"\n" +
	"'microwatcher/v1/telemetry_service.proto\x12\x0fmicrowatcher.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9d\x02\n" +
	"\tTelemetry\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1e\n" +
	"\n" +
	"identifier\x18\x02 \x01(\tR\n" +
	"identifier\x12!\n" +
	"\ftotal_memory\x18\x03 \x01(\x04R\vtotalMemory\x12\x1f\n" +
	"\vfree_memory\x18\x04 \x01(\x04R\n" +
	"freeMemory\x12\x1f\n" +
	"\vused_memory\x18\x05 \x01(\x04R\n" +
	"usedMemory\x12\x1b\n" +
	"\ttotal_cpu\x18\x06 \x01(\x02R\btotalCpu\x12\x19\n" +
	"\bfree_cpu\x18\a \x01(\x02R\afreeCpu\x12\x19\n" +
	"\bused_cpu\x18\b \x01(\x02R\ausedCpu\"T\n" +
	"\x14SendTelemetryRequest\x12<\n" +
	"\vtelemetries\x18\x01 \x03(\v2\x1a.microwatcher.v1.TelemetryR\vtelemetries\"1\n" +
	"\x15SendTelemetryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2t\n" +
	"\x10TelemetryService\x12`\n" +
	"\rSendTelemetry\x12%.microwatcher.v1.SendTelemetryRequest\x1a&.microwatcher.v1.SendTelemetryResponse\"\x00BCZAgithub.com/microwatcher/shared/gen/microwatcher/v1;microwatcherv1b\x06proto3"

var (
	file_microwatcher_v1_telemetry_service_proto_rawDescOnce sync.Once
	file_microwatcher_v1_telemetry_service_proto_rawDescData []byte
)

func file_microwatcher_v1_telemetry_service_proto_rawDescGZIP() []byte {
	file_microwatcher_v1_telemetry_service_proto_rawDescOnce.Do(func() {
		file_microwatcher_v1_telemetry_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_microwatcher_v1_telemetry_service_proto_rawDesc), len(file_microwatcher_v1_telemetry_service_proto_rawDesc)))
	})
	return file_microwatcher_v1_telemetry_service_proto_rawDescData
}

var file_microwatcher_v1_telemetry_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_microwatcher_v1_telemetry_service_proto_goTypes = []any{
	(*Telemetry)(nil),             // 0: microwatcher.v1.Telemetry
	(*SendTelemetryRequest)(nil),  // 1: microwatcher.v1.SendTelemetryRequest
	(*SendTelemetryResponse)(nil), // 2: microwatcher.v1.SendTelemetryResponse
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_microwatcher_v1_telemetry_service_proto_depIdxs = []int32{
	3, // 0: microwatcher.v1.Telemetry.timestamp:type_name -> google.protobuf.Timestamp
	0, // 1: microwatcher.v1.SendTelemetryRequest.telemetries:type_name -> microwatcher.v1.Telemetry
	1, // 2: microwatcher.v1.TelemetryService.SendTelemetry:input_type -> microwatcher.v1.SendTelemetryRequest
	2, // 3: microwatcher.v1.TelemetryService.SendTelemetry:output_type -> microwatcher.v1.SendTelemetryResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_microwatcher_v1_telemetry_service_proto_init() }
func file_microwatcher_v1_telemetry_service_proto_init() {
	if File_microwatcher_v1_telemetry_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_microwatcher_v1_telemetry_service_proto_rawDesc), len(file_microwatcher_v1_telemetry_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_microwatcher_v1_telemetry_service_proto_goTypes,
		DependencyIndexes: file_microwatcher_v1_telemetry_service_proto_depIdxs,
		MessageInfos:      file_microwatcher_v1_telemetry_service_proto_msgTypes,
	}.Build()
	File_microwatcher_v1_telemetry_service_proto = out.File
	file_microwatcher_v1_telemetry_service_proto_goTypes = nil
	file_microwatcher_v1_telemetry_service_proto_depIdxs = nil
}
