package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/microwatcher/shared/pkg/clickhouse"
	"github.com/microwatcher/shared/pkg/iter"
	"github.com/microwatcher/webserver/internal/graph/model"
)

// CreateDevice is the resolver for the createDevice field.
func (r *mutationResolver) CreateDevice(ctx context.Context, input model.CreateDevice) (model.DeviceMutationResult, error) {
	panic(fmt.Errorf("not implemented: CreateDevice - createDevice"))
}

// ResetDeviceSecret is the resolver for the resetDeviceSecret field.
func (r *mutationResolver) ResetDeviceSecret(ctx context.Context, deviceID uuid.UUID) (model.ResetDeviceSecretResult, error) {
	panic(fmt.Errorf("not implemented: ResetDeviceSecret - resetDeviceSecret"))
}

// Devices is the resolver for the devices field.
func (r *queryResolver) Devices(ctx context.Context) (model.DeviceQueryResult, error) {
	chDevices, err := r.ChSource.ListDevices(ctx)

	if err != nil {
		return model.GenericError{
			Message: err.Error(),
		}, nil
	}

	return model.DeviceList{
		Devices: iter.Map(chDevices, func(chDevice *clickhouse.ClickhouseDevice) *model.Device {
			return &model.Device{
				ID:     chDevice.ID,
				Label:  chDevice.Label,
				Secret: chDevice.Secret,
			}
		}),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
